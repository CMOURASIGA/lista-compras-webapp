Resumo do problema:
- O projeto é um WebApp de Lista de Compras com autenticação via Google.
- O login ocorre corretamente, mas o WebApp não é carregado após o login.
- Deseja-se que, após autenticar, o usuário vá direto para a interface principal.
- A seguir, os arquivos principais do projeto:


--- ARQUIVO: CONFIGURACAO_GOOGLE_OAUTH.md ---
# Configuração do Google OAuth para Lista de Compras

## Problema Identificado

O erro `idpiframe_initialization_failed` ocorre porque o domínio atual não está registrado como uma origem autorizada no Google Cloud Console.

## Solução: Configurar Origens Autorizadas

### 1. Acesse o Google Cloud Console

1. Vá para [Google Cloud Console](https://console.cloud.google.com/)
2. Selecione seu projeto ou crie um novo
3. Navegue para **APIs & Services** > **Credentials**

### 2. Configure o OAuth 2.0 Client ID

1. Encontre seu Client ID: `61677669740-s27okg6q5drbumg3v018c0hckh22euqn.apps.googleusercontent.com`
2. Clique no ícone de edição (lápis)
3. Na seção **Authorized JavaScript origins**, adicione:

**Para desenvolvimento local:**
```
http://localhost:3000
http://localhost:3001
http://127.0.0.1:3000
http://127.0.0.1:3001
```

**Para produção (substitua pelo seu domínio):**
```
https://seudominio.com
https://www.seudominio.com
```

### 3. Habilitar APIs Necessárias

Certifique-se de que as seguintes APIs estão habilitadas:

1. **Google Sheets API**
   - Vá para **APIs & Services** > **Library**
   - Procure por "Google Sheets API"
   - Clique em "Enable"

2. **Google Drive API**
   - Procure por "Google Drive API"
   - Clique em "Enable"

### 4. Configurar Tela de Consentimento OAuth

1. Vá para **APIs & Services** > **OAuth consent screen**
2. Configure as informações básicas:
   - **Application name**: Lista de Compras
   - **User support email**: seu email
   - **Developer contact information**: seu email

3. Na seção **Scopes**, adicione:
   - `https://www.googleapis.com/auth/spreadsheets`
   - `https://www.googleapis.com/auth/drive.file`

### 5. Testar Localmente

Após configurar as origens autorizadas:

1. Aguarde alguns minutos para as mudanças propagarem
2. Acesse `http://localhost:3000` ou `http://localhost:3001`
3. Teste o login com Google

## Funcionalidades Implementadas

### ✅ Autenticação Google OAuth2
- Login seguro com conta Google
- Permissões para Google Sheets e Drive

### ✅ Criação Automática de Planilha
- Ao fazer login, uma planilha é criada automaticamente no Google Drive do usuário
- Estrutura com abas "Itens" e "Historico"
- Cabeçalhos configurados automaticamente

### ✅ Sincronização de Dados
- Dados salvos localmente (localStorage) como fallback
- Sincronização automática com Google Sheets quando disponível
- Indicador visual do status de sincronização

### ✅ Funcionalidades da Lista
- Adicionar itens com categoria, quantidade e preço
- Marcar itens como comprados
- Remover itens da lista
- Finalizar compra e mover para histórico

### ✅ Histórico e Estatísticas
- Histórico completo de compras
- Estatísticas de gastos por categoria
- Filtros por período

## Estrutura da Planilha Criada

### Aba "Itens"
| ID | Nome | Quantidade | Categoria | Preco | Status | DataCriacao |
|----|------|------------|-----------|-------|--------|-------------|

### Aba "Historico"
| Data | Item | Quantidade | Preco | Categoria | Loja | Total | 
--- ARQUIVO: package.json ---
{
  "name": "lista-compras-webapp",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "@react-oauth/google": "^0.12.2",
    "google-auth-library": "^10.1.0",
    "googleapis": "^153.0.0",
    "jwt-decode": "^4.0.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

--- ARQUIVO: build/index.html ---
<!doctype html><html lang="pt-BR"><head><meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/><meta name="theme-color" content="#000000"/><meta name="description" content="Lista de Compras - Organize suas compras de forma inteligente"/><meta name="google-site-verification" content="iAmuDmvETix1qy-H0_3Pl05lchyYnVFGJlDVeBWqsCY"/><link rel="icon" href="/favicon.ico"/><link rel="apple-touch-icon" href="/logo192.png"/><link rel="manifest" href="/manifest.json"/><script src="https://accounts.google.com/gsi/client" async defer="defer"></script><script src="https://apis.google.com/js/api.js" async defer="defer"></script><title>Lista de Compras</title><script defer="defer" src="/static/js/main.443f5c06.js"></script><link href="/static/css/main.19efb75b.css" rel="stylesheet"></head><body><noscript>Você precisa habilitar JavaScript para executar esta aplicação.</noscript><div id="root"></div></body></html>
--- ARQUIVO: README.md ---
# Minha Lista de Compras WebApp

Este é um projeto React + Tailwind CSS para gerenciamento de listas de compras integradas ao Google Sheets.

## Scripts

- `npm install` — Instala dependências
- `npm start` — Roda localmente em http://localhost:3000
- `npm run build` — Gera versão de produção

## Configuração

Copie o arquivo `.env.example` para `.env` e preencha as variáveis com os dados do Google Cloud Console.

## Deploy

Este projeto pode ser hospedado no [Render.com](https://render.com) ou Firebase Hosting.
